{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO1JrIJOjZQ/20Rck/2et76",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jpetersw/GOU_MIA11/blob/main/bodegas_app.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Mi_7Y9pD2g1Y"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
        "from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n",
        "import streamlit as st\n",
        "import plotly.express as px\n",
        "\n",
        "# 1. Generación del Dataset (Simulado)\n",
        "def generar_dataset(n_muestras=1000):\n",
        "    \"\"\"\n",
        "    Genera un dataset sintético de bodegas industriales en la Ciudad de México.\n",
        "\n",
        "    Parámetros:\n",
        "    n_muestras (int): Número de muestras en el dataset.\n",
        "\n",
        "    Retorna:\n",
        "    pd.DataFrame: Un DataFrame con los datos de las bodegas.\n",
        "    \"\"\"\n",
        "    alcaldias = ['Álvaro Obregón', 'Benito Juárez', 'Coyoacán', 'Cuauhtémoc', 'Miguel Hidalgo', 'Tlalpan', 'Venustiano Carranza', 'Iztapalapa']\n",
        "    tipos_construccion = ['Acero', 'Concreto', 'Mixta']\n",
        "\n",
        "    data = {\n",
        "        'Alcalia': np.random.choice(alcaldias, n_muestras),\n",
        "        'Superficie (m2)': np.random.uniform(1000, 10000, n_muestras),\n",
        "        'Antiguedad (años)': np.random.randint(0, 50, n_muestras),\n",
        "        'Tipo de Construccion': np.random.choice(tipos_construccion, n_muestras),\n",
        "        'Num_Accesos': np.random.randint(1, 5, n_muestras),\n",
        "        'Distancia_Centro (km)': np.random.uniform(5, 30, n_muestras),\n",
        "        'Precio (USD)': None\n",
        "    }\n",
        "    df = pd.DataFrame(data)\n",
        "    df['Precio (USD)'] = (\n",
        "        100 * df['Superficie (m2)'] +\n",
        "        5000 * df['Num_Accesos'] -\n",
        "        200 * df['Antiguedad (años)'] -\n",
        "        1000 * df['Distancia_Centro (km)'] +\n",
        "        np.random.normal(0, 50000, n_muestras)\n",
        "    ).clip(lower=100000)\n",
        "    return df\n",
        "\n",
        "# 2. Preprocesamiento de Datos\n",
        "def preprocesar_datos(df):\n",
        "    \"\"\"\n",
        "    Preprocesa el dataset de bodegas industriales.\n",
        "\n",
        "    Parámetros:\n",
        "    df (pd.DataFrame): El DataFrame con los datos de las bodegas.\n",
        "\n",
        "    Retorna:\n",
        "    pd.DataFrame: El DataFrame preprocesado.\n",
        "    \"\"\"\n",
        "    numeric_cols = ['Superficie (m2)', 'Antiguedad (años)', 'Num_Accesos', 'Distancia_Centro (km)']\n",
        "    for col in numeric_cols:\n",
        "        df[col] = df[col].fillna(df[col].mean())\n",
        "    df = pd.get_dummies(df, columns=['Alcaldia', 'Tipo de Construccion'], drop_first=True)\n",
        "    return df\n",
        "\n",
        "# 3. Entrenamiento del Modelo\n",
        "def entrenar_modelo(df, modelo='Regresión Lineal'):\n",
        "    \"\"\"\n",
        "    Entrena un modelo de regresión para predecir el precio de las bodegas.\n",
        "\n",
        "    Parámetros:\n",
        "    df (pd.DataFrame): El DataFrame con los datos preprocesados.\n",
        "    modelo (str): El nombre del modelo a entrenar ('Regresión Lineal', 'Árbol de Decisión', 'Random Forest', 'Gradient Boosting').\n",
        "\n",
        "    Retorna:\n",
        "    tuple: El modelo entrenado y el conjunto de prueba.\n",
        "    \"\"\"\n",
        "    X = df.drop('Precio (USD)', axis=1)\n",
        "    y = df['Precio (USD)']\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "    numeric_features = ['Superficie (m2)', 'Antiguedad (años)', 'Num_Accesos', 'Distancia_Centro (km)']\n",
        "    preprocessor = ColumnTransformer(transformers=[('num', StandardScaler(), numeric_features)])\n",
        "\n",
        "    if modelo == 'Regresión Lineal':\n",
        "        model = LinearRegression()\n",
        "    elif modelo == 'Árbol de Decisión':\n",
        "        model = DecisionTreeRegressor(random_state=42)\n",
        "    elif modelo == 'Random Forest':\n",
        "        model = RandomForestRegressor(random_state=42)\n",
        "    elif modelo == 'Gradient Boosting':\n",
        "        model = GradientBoostingRegressor(random_state=42)\n",
        "    else:\n",
        "        raise ValueError(\"Modelo no válido.\")\n",
        "\n",
        "    pipeline = Pipeline(steps=[('preprocessor', preprocessor), ('model', model)])\n",
        "    pipeline.fit(X_train, y_train)\n",
        "\n",
        "    return pipeline, X_test, y_test\n",
        "\n",
        "# 4. Evaluación del Modelo\n",
        "def evaluar_modelo(modelo, X_test, y_test):\n",
        "    \"\"\"\n",
        "    Evalúa el rendimiento del modelo de regresión.\n",
        "\n",
        "    Parámetros:\n",
        "    modelo: El modelo entrenado.\n",
        "    X_test (pd.DataFrame): El conjunto de prueba de características.\n",
        "    y_test (pd.Series): El conjunto de prueba de la variable objetivo.\n",
        "\n",
        "    Retorna:\n",
        "    dict: Un diccionario con las métricas de evaluación (MSE, RMSE, R², MAE).\n",
        "    \"\"\"\n",
        "    y_pred = modelo.predict(X_test)\n",
        "    mse = mean_squared_error(y_test, y_pred)\n",
        "    rmse = np.sqrt(mse)\n",
        "    r2 = r2_score(y_test, y_pred)\n",
        "    mae = mean_absolute_error(y_test, y_pred)\n",
        "    return {'MSE': mse, 'RMSE': rmse, 'R2': r2, 'MAE': mae}\n",
        "\n",
        "# 5. Visualización de Resultados\n",
        "def visualizar_resultados(y_test, y_pred, modelo_nombre=''):\n",
        "    \"\"\"\n",
        "    Visualiza los resultados del modelo de regresión usando Plotly.\n",
        "\n",
        "    Parámetros:\n",
        "    y_test (pd.Series): Los valores reales de la variable objetivo.\n",
        "    y_pred (np.ndarray): Los valores predichos por el modelo.\n",
        "    modelo_nombre (str): Nombre del modelo para el título del gráfico.\n",
        "    \"\"\"\n",
        "    df_plot = pd.DataFrame({'Precio Real (USD)': y_test, 'Precio Predicho (USD)': y_pred})\n",
        "    fig = px.scatter(df_plot, x='Precio Real (USD)', y='Precio Predicho (USD)',\n",
        "                     title=f'Valores Reales vs. Predicciones ({modelo_nombre})',\n",
        "                     labels={'Precio Real (USD)': 'Precio Real (USD)', 'Precio Predicho (USD)': 'Precio Predicho (USD)'})\n",
        "    fig.add_shape(\n",
        "        type=\"line\",\n",
        "        x0=y_test.min(), y0=y_test.min(),\n",
        "        x1=y_test.max(), y1=y_test.max(),\n",
        "        line=dict(color=\"red\", dash=\"dash\")\n",
        "    )\n",
        "    st.plotly_chart(fig)\n",
        "\n",
        "# 6. Función Principal para Streamlit\n",
        "def main():\n",
        "    \"\"\"\n",
        "    Función principal para ejecutar la aplicación de Streamlit.\n",
        "    \"\"\"\n",
        "    st.title(\"Análisis de Precios de Bodegas Industriales en CDMX\")\n",
        "    st.write(\"Esta aplicación permite analizar y predecir los precios de bodegas industriales en la Ciudad de México.\")\n",
        "\n",
        "    # 1. Generar el dataset\n",
        "    df = generar_dataset()\n",
        "\n",
        "    # Mostrar un ejemplo del dataset\n",
        "    st.subheader(\"Ejemplo del Dataset:\")\n",
        "    st.dataframe(df.head())\n",
        "\n",
        "    # 2. Preprocesar los datos\n",
        "    df_preprocesado = preprocesar_datos(df)\n",
        "\n",
        "    # 3. Selección del modelo\n",
        "    model_option = st.sidebar.selectbox(\"Seleccione el modelo de regresión:\",\n",
        "                                        ['Regresión Lineal', 'Árbol de Decisión', 'Random Forest', 'Gradient Boosting'])\n",
        "\n",
        "    # 4. Entrenar el modelo\n",
        "    modelo, X_test, y_test = entrenar_modelo(df_preprocesado, modelo=model_option)\n",
        "\n",
        "    # 5. Evaluar el modelo\n",
        "    st.subheader(\"Evaluación del Modelo\")\n",
        "    metricas = evaluar_modelo(modelo, X_test, y_test)\n",
        "    st.write(f\"Métricas de evaluación para {model_option}:\")\n",
        "    st.json(metricas)  # Mostrar las métricas como JSON\n",
        "\n",
        "    # 6. Visualizar los resultados\n",
        "    st.subheader(\"Visualización de Resultados\")\n",
        "    visualizar_resultados(y_test, modelo.predict(X_test), modelo_nombre=model_option)\n",
        "\n",
        "    # 7. Predicción de Precio para una Nueva Bodega\n",
        "    st.subheader(\"Predicción de Precio para una Nueva Bodega\")\n",
        "\n",
        "    # Crear controles para ingresar las características de la nueva bodega\n",
        "    alcaldia_seleccionada = st.selectbox(\"Alcaldía\", ['Álvaro Obregón', 'Benito Juárez', 'Coyoacán', 'Cuauhtémoc', 'Miguel Hidalgo', 'Tlalpan', 'Venustiano Carranza', 'Iztapalapa'])\n",
        "    superficie = st.number_input(\"Superficie (m2)\", min_value=1000, max_value=10000, value=5000)\n",
        "    antiguedad = st.number_input(\"Antigüedad (años)\", min_value=0, max_value=50, value=10)\n",
        "    tipo_construccion = st.selectbox(\"Tipo de Construcción\", ['Acero', 'Concreto', 'Mixta'])\n",
        "    num_accesos = st.number_input(\"Número de Accesos\", min_value=1, max_value=5, value=2)\n",
        "    distancia_centro = st.number_input(\"Distancia al Centro (km)\", min_value=5.0, max_value=30.0, value=15.0)\n",
        "\n",
        "    # Crear un DataFrame con los datos de la nueva bodega\n",
        "    nueva_bodega = pd.DataFrame({\n",
        "        'Superficie (m2)': [superficie],\n",
        "        'Antiguedad (años)': [antiguedad],\n",
        "        'Num_Accesos': [num_accesos],\n",
        "        'Distancia_Centro (km)': [distancia_centro],\n",
        "        'Alcaldia': [alcaldia_seleccionada],\n",
        "        'Tipo de Construccion': [tipo_construccion]\n",
        "    })\n",
        "\n",
        "    # Preprocesar la nueva bodega\n",
        "    nueva_bodega_preprocesada = preprocesar_datos(nueva_bodega.copy()) # Asegurarse de no modificar el original\n",
        "\n",
        "     # Asegurar el mismo orden de columnas que en el conjunto de entrenamiento\n",
        "    columnas_entrenamiento = X_test.columns\n",
        "    nueva_bodega_preprocesada = nueva_bodega_preprocesada.reindex(columns=columnas_entrenamiento, fill_value=0)\n",
        "\n",
        "    # Realizar la predicción\n",
        "    precio_predicho = modelo.predict(nueva_bodega_preprocesada)[0]\n",
        "\n",
        "    st.write(f\"El precio predicho para una bodega con estas características es: ${precio_predicho:.2f}\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ]
    }
  ]
}